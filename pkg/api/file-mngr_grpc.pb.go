// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: internal/server/api/proto/file-mngr.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileMngrClient is the client API for FileMngr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileMngrClient interface {
	SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*SaveFileResponse, error)
	GetFilesInfo(ctx context.Context, in *GetFilesInfoRequest, opts ...grpc.CallOption) (*GetFilesInfoResponse, error)
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error)
}

type fileMngrClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMngrClient(cc grpc.ClientConnInterface) FileMngrClient {
	return &fileMngrClient{cc}
}

func (c *fileMngrClient) SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*SaveFileResponse, error) {
	out := new(SaveFileResponse)
	err := c.cc.Invoke(ctx, "/api.FileMngr/SaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMngrClient) GetFilesInfo(ctx context.Context, in *GetFilesInfoRequest, opts ...grpc.CallOption) (*GetFilesInfoResponse, error) {
	out := new(GetFilesInfoResponse)
	err := c.cc.Invoke(ctx, "/api.FileMngr/GetFilesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMngrClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (*GetFilesResponse, error) {
	out := new(GetFilesResponse)
	err := c.cc.Invoke(ctx, "/api.FileMngr/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMngrServer is the server API for FileMngr service.
// All implementations must embed UnimplementedFileMngrServer
// for forward compatibility
type FileMngrServer interface {
	SaveFile(context.Context, *SaveFileRequest) (*SaveFileResponse, error)
	GetFilesInfo(context.Context, *GetFilesInfoRequest) (*GetFilesInfoResponse, error)
	GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error)
	mustEmbedUnimplementedFileMngrServer()
}

// UnimplementedFileMngrServer must be embedded to have forward compatible implementations.
type UnimplementedFileMngrServer struct {
}

func (UnimplementedFileMngrServer) SaveFile(context.Context, *SaveFileRequest) (*SaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedFileMngrServer) GetFilesInfo(context.Context, *GetFilesInfoRequest) (*GetFilesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesInfo not implemented")
}
func (UnimplementedFileMngrServer) GetFiles(context.Context, *GetFilesRequest) (*GetFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFileMngrServer) mustEmbedUnimplementedFileMngrServer() {}

// UnsafeFileMngrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileMngrServer will
// result in compilation errors.
type UnsafeFileMngrServer interface {
	mustEmbedUnimplementedFileMngrServer()
}

func RegisterFileMngrServer(s grpc.ServiceRegistrar, srv FileMngrServer) {
	s.RegisterService(&FileMngr_ServiceDesc, srv)
}

func _FileMngr_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMngrServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileMngr/SaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMngrServer).SaveFile(ctx, req.(*SaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMngr_GetFilesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMngrServer).GetFilesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileMngr/GetFilesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMngrServer).GetFilesInfo(ctx, req.(*GetFilesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMngr_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMngrServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.FileMngr/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMngrServer).GetFiles(ctx, req.(*GetFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileMngr_ServiceDesc is the grpc.ServiceDesc for FileMngr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileMngr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FileMngr",
	HandlerType: (*FileMngrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveFile",
			Handler:    _FileMngr_SaveFile_Handler,
		},
		{
			MethodName: "GetFilesInfo",
			Handler:    _FileMngr_GetFilesInfo_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _FileMngr_GetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/server/api/proto/file-mngr.proto",
}
